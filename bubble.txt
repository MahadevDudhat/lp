 #include <iostream>
 #include <vector>
 #include <cstdlib>
 #include <ctime>
 #include <chrono>
 #include <omp.h>
 using namespace std;
 
 void sequentialBubbleSort(vector<int> &arr)
 {
     int n = arr.size();
     bool swapped = true;
     while (swapped)
     {
         swapped = false;
         for (int i = 0; i < n - 1; i++)
         {
             if (arr[i] > arr[i + 1])
             {
                 swap(arr[i], arr[i + 1]);
                 swapped = true;
             }
         }
     }
 }
 
 void parallelOddEvenSort(vector<int> &arr)
 {
     int n = arr.size();
     bool isSorted = false;
 
     while (!isSorted)
     {
         isSorted = true;
 
         // Even phase
 #pragma omp parallel for shared(arr)
         for (int i = 0; i < n - 1; i += 2)
         {
             if (arr[i] > arr[i + 1])
             {
                 swap(arr[i], arr[i + 1]);
                 isSorted = false;
             }
         }
 
         // Odd phase
 #pragma omp parallel for shared(arr)
         for (int i = 1; i < n - 1; i += 2)
         {
             if (arr[i] > arr[i + 1])
             {
                 swap(arr[i], arr[i + 1]);
                 isSorted = false;
             }
         }
     }
 }
 
 int main()
 {
     int n = 1000;
     cout << "Generating " << n << " random numbers..." << endl;
 
     vector<int> arr(n), arr_copy(n);
     srand(time(0));
     for (int i = 0; i < n; i++)
     {
         arr[i] = rand() % 10000;
     }
     arr_copy = arr;
 
     auto seqStart = chrono::high_resolution_clock::now();
     sequentialBubbleSort(arr);
     auto seqEnd = chrono::high_resolution_clock::now();
 
     auto parStart = chrono::high_resolution_clock::now();
     parallelOddEvenSort(arr_copy);
     auto parEnd = chrono::high_resolution_clock::now();
 
     cout << "\nFirst 10 elements of sorted array (sequential): ";
     for (int i = 0; i < 10; i++)
         cout << arr[i] << " ";
 
     cout << "\nFirst 10 elements of sorted array (parallel): ";
     for (int i = 0; i < 10; i++)
         cout << arr_copy[i] << " ";
     cout << endl;
 
     chrono::duration<double> seqDuration = seqEnd - seqStart;
     chrono::duration<double> parDuration = parEnd - parStart;
 
     cout << "\nSequential Bubble Sort time: " << seqDuration.count() << " seconds";
     cout << "\nParallel Odd-Even Sort time: " << parDuration.count() << " seconds" << endl;
     cout << "Speedup: " << seqDuration.count() / parDuration.count() << "x" << endl;
 
     return 0;
 }