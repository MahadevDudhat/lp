 #include <iostream>
 #include <vector>
 #include <cstdlib>
 #include <ctime>
 #include <chrono>
 #include <omp.h>
 using namespace std;
 
 // Merge function
 void merge(vector<int> &arr, int l, int m, int r)
 {
     vector<int> temp;
     int left = l, right = m + 1;
 
     while (left <= m && right <= r)
     {
         if (arr[left] <= arr[right])
             temp.push_back(arr[left++]);
         else
             temp.push_back(arr[right++]);
     }
 
     while (left <= m)
         temp.push_back(arr[left++]);
 
     while (right <= r)
         temp.push_back(arr[right++]);
 
     for (int i = l; i <= r; ++i)
         arr[i] = temp[i - l];
 }
 
 // Sequential Merge Sort
 void sequentialMergeSort(vector<int> &arr, int l, int r)
 {
     if (l < r)
     {
         int m = l + (r - l) / 2;
         sequentialMergeSort(arr, l, m);
         sequentialMergeSort(arr, m + 1, r);
         merge(arr, l, m, r);
     }
 }
 
 // Parallel Merge Sort
 void parallelMergeSort(vector<int> &arr, int l, int r)
 {
     if (l < r)
     {
         int m = l + (r - l) / 2;
 
 #pragma omp parallel sections
         {
 #pragma omp section
             parallelMergeSort(arr, l, m);
 
 #pragma omp section
             parallelMergeSort(arr, m + 1, r);
         }
 
         merge(arr, l, m, r);
     }
 }
 
 int main()
 {
     int n = 100000; // Adjust size to see clear performance difference
     cout << "Generating " << n << " random numbers..." << endl;
 
     vector<int> arr(n), arr_copy(n);
     srand(time(0));
 
     for (int i = 0; i < n; ++i)
         arr[i] = rand() % 100000;
 
     arr_copy = arr; // Copy for parallel version
 
     auto seqStart = chrono::high_resolution_clock::now();
     sequentialMergeSort(arr, 0, n - 1);
     auto seqEnd = chrono::high_resolution_clock::now();
 
     auto parStart = chrono::high_resolution_clock::now();
     parallelMergeSort(arr_copy, 0, n - 1);
     auto parEnd = chrono::high_resolution_clock::now();
 
     cout << "\nFirst 10 elements of sorted array (sequential): ";
     for (int i = 0; i < 10; ++i)
         cout << arr[i] << " ";
 
     cout << "\nFirst 10 elements of sorted array (parallel): ";
     for (int i = 0; i < 10; ++i)
         cout << arr_copy[i] << " ";
 
     chrono::duration<double> seqDuration = seqEnd - seqStart;
     chrono::duration<double> parDuration = parEnd - parStart;
 
     cout << "\n\nSequential Merge Sort time: " << seqDuration.count() << " seconds";
     cout << "\nParallel Merge Sort time:   " << parDuration.count() << " seconds";
     cout << "\nSpeedup: " << seqDuration.count() / parDuration.count() << "x\n";
 
     return 0;
 }